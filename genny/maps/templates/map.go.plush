//go:generate mapgen -name "<%= m.Name %>" -zero "<%= m.Zero %>" -go-type "<%= m.GoType %>" -pkg "<%= m.Package %>" -a "<%= m.A %>" -b "<%= m.B %>" -c "<%= m.C %>" -bb "<%= m.BB %>"
// Code generated by github.com/gobuffalo/mapgen. DO NOT EDIT.

package <%= m.Destination %>

import (
  "sort"
  "sync"
<%= if (m.Package) { %>
 "<%= m.Package %>"
<% } %>
)

// <%= m.Name %>Map wraps sync.Map and uses the following types:
// key:   string
// value: <%= m.GoType %>
type <%= m.Name %>Map struct {
	data sync.Map
}

// Delete the key from the map
func (m *<%= m.Name %>Map) Delete(key string) {
	m.data.Delete(key)
}

// Load the key from the map.
// Returns <%= m.GoType %> or bool.
// A false return indicates either the key was not found
// or the value is not of type <%= m.GoType %>
func (m *<%= m.Name %>Map) Load(key string) (<%= m.GoType %>, bool) {
	i, ok := m.data.Load(key)
	if !ok {
		return <%= m.Zero %>, false
	}
	s, ok := i.(<%= m.GoType %>)
	return s, ok
}

// LoadOrStore will return an existing key or
// store the value if not already in the map
func (m *<%= m.Name %>Map) LoadOrStore(key string, value <%= m.GoType %>) (<%= m.GoType %>, bool) {
	i, _ := m.data.LoadOrStore(key, value)
	s, ok := i.(<%= m.GoType %>)
	return s, ok
}

// Range over the <%= m.GoType %> values in the map
func (m *<%= m.Name %>Map) Range(f func(key string, value <%= m.GoType %>) bool) {
	m.data.Range(func(k, v interface{}) bool {
		key, ok := k.(string)
		if !ok {
			return false
		}
		value, ok := v.(<%= m.GoType %>)
		if !ok {
			return false
		}
		return f(key, value)
	})
}

// Store a <%= m.GoType %> in the map
func (m *<%= m.Name %>Map) Store(key string, value <%= m.GoType %>) {
	m.data.Store(key, value)
}

// Keys returns a list of keys in the map
func (m *<%= m.Name %>Map) Keys() []string {
	var keys []string
	m.Range(func(key string, value <%= m.GoType %>) bool {
		keys = append(keys, key)
		return true
	})
	sort.Strings(keys)
	return keys
}
