// Code generated by github.com/gobuffalo/mapgen. DO NOT EDIT.

package <%= here.Name %>

import (
  "sort"
  "sync"
<%= if (m.Import) { %>
 "<%= m.Import %>"
<% } %>
)

// <%= m.Name %> wraps sync.Map and uses the following types:
// key:   string
// value: <%= m.Type %>
type <%= m.Name %> struct {
  data *sync.Map
  init sync.Once
}

func (m *<%= m.Name %>) Data() *sync.Map {
  m.init.Do(func() {
    if m.data == nil {
      m.data = &sync.Map{}
    }
  })
  return m.data
}

// Delete the key from the map
func (m *<%= m.Name %>) Delete(key string) {
  m.Data().Delete(key)
}

// Load the key from the map.
// Returns <%= m.Type %> or bool.
// A false return indicates either the key was not found
// or the value is not of type <%= m.Type %>
func (m *<%= m.Name %>) Load(key string) (<%= m.Type %>, bool) {
  i, ok := m.Data().Load(key)
  if !ok {
    return <%= raw(m.Zero) %>, false
  }
  s, ok := i.(<%= m.Type %>)
  return s, ok
}

// LoadOrStore will return an existing key or
// store the value if not already in the map
func (m *<%= m.Name %>) LoadOrStore(key string, value <%= m.Type %>) (<%= m.Type %>, bool) {
  i, _ := m.Data().LoadOrStore(key, value)
  s, ok := i.(<%= m.Type %>)
  return s, ok
}

// LoadOr will return an existing key or
// run the function and store the results
func (m *<%= m.Name %>) LoadOr(key string, fn func(*<%= m.Name %>) (<%= m.Type %>, bool)) (<%= m.Type %>, bool) {
  i, ok := m.Load(key)
  if ok {
    return i, ok
  }
  i, ok = fn(m)
  if ok {
    m.Store(key, i)
    return i, ok
  }
  return i, false
}

// Range over the <%= m.Type %> values in the map
func (m *<%= m.Name %>) Range(f func(key string, value <%= m.Type %>) bool) {
  m.Data().Range(func(k, v interface{}) bool {
    key, ok := k.(string)
    if !ok {
      return false
    }
    value, ok := v.(<%= m.Type %>)
    if !ok {
      return false
    }
    return f(key, value)
  })
}

// Store a <%= m.Type %> in the map
func (m *<%= m.Name %>) Store(key string, value <%= m.Type %>) {
  m.Data().Store(key, value)
}

// Keys returns a list of keys in the map
func (m *<%= m.Name %>) Keys() []string {
  var keys []string
  m.Range(func(key string, value <%= m.Type %>) bool {
    keys = append(keys, key)
    return true
  })
  sort.Strings(keys)
  return keys
}
